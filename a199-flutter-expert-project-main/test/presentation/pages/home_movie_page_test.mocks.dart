// Mocks generated by Mockito 5.4.4 from annotations
// in ditonton/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:ditonton/common/state_freezed.dart' as _i2;
import 'package:ditonton/domain/entities/movie.dart' as _i4;
import 'package:ditonton/domain/entities/tv_series.dart' as _i10;
import 'package:ditonton/presentation/bloc/movies/movies_list_now_playing_bloc/movies_list_now_playing_bloc.dart'
    as _i3;
import 'package:ditonton/presentation/bloc/movies/movies_list_popular_bloc/movies_list_popular_bloc.dart'
    as _i7;
import 'package:ditonton/presentation/bloc/movies/movies_list_top_rated_bloc/movies_list_top_rated_bloc.dart'
    as _i8;
import 'package:ditonton/presentation/bloc/tv_series_list_airing_today_bloc/tv_series_list_airing_today_bloc.dart'
    as _i9;
import 'package:ditonton/presentation/bloc/tv_series_list_popular_bloc/tv_series_list_popular_bloc.dart'
    as _i11;
import 'package:ditonton/presentation/bloc/tv_series_list_top_rated_bloc/tv_series_list_top_rated_bloc.dart'
    as _i12;
import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRequestStateFr_0<T> extends _i1.SmartFake
    implements _i2.RequestStateFr<T> {
  _FakeRequestStateFr_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MoviesListNowPlayingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesListNowPlayingBloc extends _i1.Mock
    implements _i3.MoviesListNowPlayingBloc {
  MockMoviesListNowPlayingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i4.Movie>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i4.Movie>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i4.Movie>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchNowPlaying(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i4.Movie>>>? emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNowPlaying,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i3.MoviesListNowPlayingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i3.MoviesListNowPlayingEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i4.Movie>>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i3.MoviesListNowPlayingEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i4.Movie>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i3.MoviesListNowPlayingEvent,
                  _i2.RequestStateFr<List<_i4.Movie>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i4.Movie>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MoviesListPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesListPopularBloc extends _i1.Mock
    implements _i7.MoviesListPopularBloc {
  MockMoviesListPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i4.Movie>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i4.Movie>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i4.Movie>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchPopular(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i4.Movie>>>? emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopular,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i7.MoviesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i7.MoviesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i4.Movie>>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i7.MoviesListPopularEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i4.Movie>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i7.MoviesListPopularEvent,
                  _i2.RequestStateFr<List<_i4.Movie>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i4.Movie>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MoviesListTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesListTopRatedBloc extends _i1.Mock
    implements _i8.MoviesListTopRatedBloc {
  MockMoviesListTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i4.Movie>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i4.Movie>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i4.Movie>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i4.Movie>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchTopRated(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i4.Movie>>>? emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTopRated,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i8.MoviesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i8.MoviesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i4.Movie>>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i8.MoviesListTopRatedEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i4.Movie>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i8.MoviesListTopRatedEvent,
                  _i2.RequestStateFr<List<_i4.Movie>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i4.Movie>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListAiringTodayBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListAiringTodayBloc extends _i1.Mock
    implements _i9.TvSeriesListAiringTodayBloc {
  MockTvSeriesListAiringTodayBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i10.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i10.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i10.TvSeries>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchAiringToday(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i10.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAiringToday,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i9.TvSeriesListAiringTodayEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i9.TvSeriesListAiringTodayEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i10.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i9.TvSeriesListAiringTodayEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i10.TvSeries>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i9.TvSeriesListAiringTodayEvent,
                  _i2.RequestStateFr<List<_i10.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i10.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListPopularBloc extends _i1.Mock
    implements _i11.TvSeriesListPopularBloc {
  MockTvSeriesListPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i10.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i10.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i10.TvSeries>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchPopular(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i10.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopular,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i11.TvSeriesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.TvSeriesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i10.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i11.TvSeriesListPopularEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i10.TvSeries>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i11.TvSeriesListPopularEvent,
                  _i2.RequestStateFr<List<_i10.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i10.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListTopRatedBloc extends _i1.Mock
    implements _i12.TvSeriesListTopRatedBloc {
  MockTvSeriesListTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RequestStateFr<List<_i10.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_0<List<_i10.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.RequestStateFr<List<_i10.TvSeries>>);

  @override
  _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>.empty(),
      ) as _i5.Stream<_i2.RequestStateFr<List<_i10.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> fetchTopRated(
          {required _i6.Emitter<_i2.RequestStateFr<List<_i10.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTopRated,
          [],
          {#emit: emit},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void add(_i12.TvSeriesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.TvSeriesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.RequestStateFr<List<_i10.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.TvSeriesListTopRatedEvent>(
    _i6.EventHandler<E, _i2.RequestStateFr<List<_i10.TvSeries>>>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i6.Transition<_i12.TvSeriesListTopRatedEvent,
                  _i2.RequestStateFr<List<_i10.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void onChange(_i6.Change<_i2.RequestStateFr<List<_i10.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
