// Mocks generated by Mockito 5.4.4 from annotations
// in ditonton/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i11;

import 'package:ditonton/common/state_enum.dart' as _i8;
import 'package:ditonton/common/state_freezed.dart' as _i5;
import 'package:ditonton/domain/entities/movie.dart' as _i7;
import 'package:ditonton/domain/entities/tv_series.dart' as _i13;
import 'package:ditonton/domain/usecases/get_now_playing_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/get_popular_movies.dart' as _i3;
import 'package:ditonton/domain/usecases/get_top_rated_movies.dart' as _i4;
import 'package:ditonton/presentation/bloc/tv_series_list_airing_today_bloc/tv_series_list_airing_today_bloc.dart'
    as _i12;
import 'package:ditonton/presentation/bloc/tv_series_list_popular_bloc/tv_series_list_popular_bloc.dart'
    as _i15;
import 'package:ditonton/presentation/bloc/tv_series_list_top_rated_bloc/tv_series_list_top_rated_bloc.dart'
    as _i16;
import 'package:ditonton/presentation/provider/movie_list_notifier.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingMovies_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularMovies_1 extends _i1.SmartFake
    implements _i3.GetPopularMovies {
  _FakeGetPopularMovies_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedMovies_2 extends _i1.SmartFake
    implements _i4.GetTopRatedMovies {
  _FakeGetTopRatedMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRequestStateFr_3<T> extends _i1.SmartFake
    implements _i5.RequestStateFr<T> {
  _FakeRequestStateFr_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListNotifier extends _i1.Mock implements _i6.MovieListNotifier {
  MockMovieListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
        Invocation.getter(#getNowPlayingMovies),
        returnValue: _FakeGetNowPlayingMovies_0(
          this,
          Invocation.getter(#getNowPlayingMovies),
        ),
      ) as _i2.GetNowPlayingMovies);

  @override
  _i3.GetPopularMovies get getPopularMovies => (super.noSuchMethod(
        Invocation.getter(#getPopularMovies),
        returnValue: _FakeGetPopularMovies_1(
          this,
          Invocation.getter(#getPopularMovies),
        ),
      ) as _i3.GetPopularMovies);

  @override
  _i4.GetTopRatedMovies get getTopRatedMovies => (super.noSuchMethod(
        Invocation.getter(#getTopRatedMovies),
        returnValue: _FakeGetTopRatedMovies_2(
          this,
          Invocation.getter(#getTopRatedMovies),
        ),
      ) as _i4.GetTopRatedMovies);

  @override
  List<_i7.Movie> get nowPlayingMovies => (super.noSuchMethod(
        Invocation.getter(#nowPlayingMovies),
        returnValue: <_i7.Movie>[],
      ) as List<_i7.Movie>);

  @override
  _i8.RequestState get nowPlayingState => (super.noSuchMethod(
        Invocation.getter(#nowPlayingState),
        returnValue: _i8.RequestState.empty,
      ) as _i8.RequestState);

  @override
  List<_i7.Movie> get popularMovies => (super.noSuchMethod(
        Invocation.getter(#popularMovies),
        returnValue: <_i7.Movie>[],
      ) as List<_i7.Movie>);

  @override
  _i8.RequestState get popularMoviesState => (super.noSuchMethod(
        Invocation.getter(#popularMoviesState),
        returnValue: _i8.RequestState.empty,
      ) as _i8.RequestState);

  @override
  List<_i7.Movie> get topRatedMovies => (super.noSuchMethod(
        Invocation.getter(#topRatedMovies),
        returnValue: <_i7.Movie>[],
      ) as List<_i7.Movie>);

  @override
  _i8.RequestState get topRatedMoviesState => (super.noSuchMethod(
        Invocation.getter(#topRatedMoviesState),
        returnValue: _i8.RequestState.empty,
      ) as _i8.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i10.Future<void> fetchNowPlayingMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchNowPlayingMovies,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> fetchPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovies,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  _i10.Future<void> fetchTopRatedMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchTopRatedMovies,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListAiringTodayBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListAiringTodayBloc extends _i1.Mock
    implements _i12.TvSeriesListAiringTodayBloc {
  MockTvSeriesListAiringTodayBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RequestStateFr<List<_i13.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_3<List<_i13.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.RequestStateFr<List<_i13.TvSeries>>);

  @override
  _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>.empty(),
      ) as _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i10.Future<void> fetchAiringToday(
          {required _i14.Emitter<_i5.RequestStateFr<List<_i13.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAiringToday,
          [],
          {#emit: emit},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void add(_i12.TvSeriesListAiringTodayEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i12.TvSeriesListAiringTodayEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.RequestStateFr<List<_i13.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i12.TvSeriesListAiringTodayEvent>(
    _i14.EventHandler<E, _i5.RequestStateFr<List<_i13.TvSeries>>>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i12.TvSeriesListAiringTodayEvent,
                  _i5.RequestStateFr<List<_i13.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void onChange(_i14.Change<_i5.RequestStateFr<List<_i13.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListPopularBloc extends _i1.Mock
    implements _i15.TvSeriesListPopularBloc {
  MockTvSeriesListPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RequestStateFr<List<_i13.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_3<List<_i13.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.RequestStateFr<List<_i13.TvSeries>>);

  @override
  _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>.empty(),
      ) as _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i10.Future<void> fetchPopular(
          {required _i14.Emitter<_i5.RequestStateFr<List<_i13.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPopular,
          [],
          {#emit: emit},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void add(_i15.TvSeriesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i15.TvSeriesListPopularEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.RequestStateFr<List<_i13.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i15.TvSeriesListPopularEvent>(
    _i14.EventHandler<E, _i5.RequestStateFr<List<_i13.TvSeries>>>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i15.TvSeriesListPopularEvent,
                  _i5.RequestStateFr<List<_i13.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void onChange(_i14.Change<_i5.RequestStateFr<List<_i13.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListTopRatedBloc extends _i1.Mock
    implements _i16.TvSeriesListTopRatedBloc {
  MockTvSeriesListTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.RequestStateFr<List<_i13.TvSeries>> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeRequestStateFr_3<List<_i13.TvSeries>>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.RequestStateFr<List<_i13.TvSeries>>);

  @override
  _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>> get stream =>
      (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue:
            _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>.empty(),
      ) as _i10.Stream<_i5.RequestStateFr<List<_i13.TvSeries>>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i10.Future<void> fetchTopRated(
          {required _i14.Emitter<_i5.RequestStateFr<List<_i13.TvSeries>>>?
              emit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTopRated,
          [],
          {#emit: emit},
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void add(_i16.TvSeriesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i16.TvSeriesListTopRatedEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.RequestStateFr<List<_i13.TvSeries>>? state) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i16.TvSeriesListTopRatedEvent>(
    _i14.EventHandler<E, _i5.RequestStateFr<List<_i13.TvSeries>>>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i14.Transition<_i16.TvSeriesListTopRatedEvent,
                  _i5.RequestStateFr<List<_i13.TvSeries>>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i10.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i10.Future<void>.value(),
        returnValueForMissingStub: _i10.Future<void>.value(),
      ) as _i10.Future<void>);

  @override
  void onChange(_i14.Change<_i5.RequestStateFr<List<_i13.TvSeries>>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
