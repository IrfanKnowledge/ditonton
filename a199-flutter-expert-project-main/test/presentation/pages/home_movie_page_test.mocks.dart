// Mocks generated by Mockito 5.4.4 from annotations
// in ditonton/test/presentation/pages/home_movie_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;
import 'dart:ui' as _i13;

import 'package:ditonton/common/state_enum.dart' as _i10;
import 'package:ditonton/domain/entities/movie.dart' as _i9;
import 'package:ditonton/domain/entities/tv_series.dart' as _i15;
import 'package:ditonton/domain/usecases/get_now_playing_movies.dart' as _i2;
import 'package:ditonton/domain/usecases/get_popular_movies.dart' as _i3;
import 'package:ditonton/domain/usecases/get_top_rated_movies.dart' as _i4;
import 'package:ditonton/domain/usecases/get_tv_series_airing_today.dart'
    as _i5;
import 'package:ditonton/domain/usecases/get_tv_series_popular.dart' as _i6;
import 'package:ditonton/domain/usecases/get_tv_series_top_rated.dart' as _i7;
import 'package:ditonton/presentation/provider/movie_list_notifier.dart' as _i8;
import 'package:ditonton/presentation/provider/tv_series_list_notifier.dart'
    as _i14;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetNowPlayingMovies_0 extends _i1.SmartFake
    implements _i2.GetNowPlayingMovies {
  _FakeGetNowPlayingMovies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPopularMovies_1 extends _i1.SmartFake
    implements _i3.GetPopularMovies {
  _FakeGetPopularMovies_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTopRatedMovies_2 extends _i1.SmartFake
    implements _i4.GetTopRatedMovies {
  _FakeGetTopRatedMovies_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvSeriesAiringToday_3 extends _i1.SmartFake
    implements _i5.GetTvSeriesAiringToday {
  _FakeGetTvSeriesAiringToday_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvSeriesPopular_4 extends _i1.SmartFake
    implements _i6.GetTvSeriesPopular {
  _FakeGetTvSeriesPopular_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTvSeriesTopRated_5 extends _i1.SmartFake
    implements _i7.GetTvSeriesTopRated {
  _FakeGetTvSeriesTopRated_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieListNotifier extends _i1.Mock implements _i8.MovieListNotifier {
  MockMovieListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
        Invocation.getter(#getNowPlayingMovies),
        returnValue: _FakeGetNowPlayingMovies_0(
          this,
          Invocation.getter(#getNowPlayingMovies),
        ),
      ) as _i2.GetNowPlayingMovies);

  @override
  _i3.GetPopularMovies get getPopularMovies => (super.noSuchMethod(
        Invocation.getter(#getPopularMovies),
        returnValue: _FakeGetPopularMovies_1(
          this,
          Invocation.getter(#getPopularMovies),
        ),
      ) as _i3.GetPopularMovies);

  @override
  _i4.GetTopRatedMovies get getTopRatedMovies => (super.noSuchMethod(
        Invocation.getter(#getTopRatedMovies),
        returnValue: _FakeGetTopRatedMovies_2(
          this,
          Invocation.getter(#getTopRatedMovies),
        ),
      ) as _i4.GetTopRatedMovies);

  @override
  List<_i9.Movie> get nowPlayingMovies => (super.noSuchMethod(
        Invocation.getter(#nowPlayingMovies),
        returnValue: <_i9.Movie>[],
      ) as List<_i9.Movie>);

  @override
  _i10.RequestState get nowPlayingState => (super.noSuchMethod(
        Invocation.getter(#nowPlayingState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  List<_i9.Movie> get popularMovies => (super.noSuchMethod(
        Invocation.getter(#popularMovies),
        returnValue: <_i9.Movie>[],
      ) as List<_i9.Movie>);

  @override
  _i10.RequestState get popularMoviesState => (super.noSuchMethod(
        Invocation.getter(#popularMoviesState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  List<_i9.Movie> get topRatedMovies => (super.noSuchMethod(
        Invocation.getter(#topRatedMovies),
        returnValue: <_i9.Movie>[],
      ) as List<_i9.Movie>);

  @override
  _i10.RequestState get topRatedMoviesState => (super.noSuchMethod(
        Invocation.getter(#topRatedMoviesState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> fetchNowPlayingMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchNowPlayingMovies,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> fetchPopularMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchPopularMovies,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> fetchTopRatedMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchTopRatedMovies,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TvSeriesListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvSeriesListNotifier extends _i1.Mock
    implements _i14.TvSeriesListNotifier {
  MockTvSeriesListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.GetTvSeriesAiringToday get getTvSeriesAiringTodayUseCase =>
      (super.noSuchMethod(
        Invocation.getter(#getTvSeriesAiringTodayUseCase),
        returnValue: _FakeGetTvSeriesAiringToday_3(
          this,
          Invocation.getter(#getTvSeriesAiringTodayUseCase),
        ),
      ) as _i5.GetTvSeriesAiringToday);

  @override
  _i6.GetTvSeriesPopular get getTvSeriesPopularUseCase => (super.noSuchMethod(
        Invocation.getter(#getTvSeriesPopularUseCase),
        returnValue: _FakeGetTvSeriesPopular_4(
          this,
          Invocation.getter(#getTvSeriesPopularUseCase),
        ),
      ) as _i6.GetTvSeriesPopular);

  @override
  _i7.GetTvSeriesTopRated get getTvSeriesTopRatedUseCase => (super.noSuchMethod(
        Invocation.getter(#getTvSeriesTopRatedUseCase),
        returnValue: _FakeGetTvSeriesTopRated_5(
          this,
          Invocation.getter(#getTvSeriesTopRatedUseCase),
        ),
      ) as _i7.GetTvSeriesTopRated);

  @override
  List<_i15.TvSeries> get tvSeriesAiringTodayList => (super.noSuchMethod(
        Invocation.getter(#tvSeriesAiringTodayList),
        returnValue: <_i15.TvSeries>[],
      ) as List<_i15.TvSeries>);

  @override
  _i10.RequestState get airingTodayState => (super.noSuchMethod(
        Invocation.getter(#airingTodayState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  List<_i15.TvSeries> get tvSeriesPopularList => (super.noSuchMethod(
        Invocation.getter(#tvSeriesPopularList),
        returnValue: <_i15.TvSeries>[],
      ) as List<_i15.TvSeries>);

  @override
  _i10.RequestState get popularState => (super.noSuchMethod(
        Invocation.getter(#popularState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  List<_i15.TvSeries> get tvSeriesTopRatedList => (super.noSuchMethod(
        Invocation.getter(#tvSeriesTopRatedList),
        returnValue: <_i15.TvSeries>[],
      ) as List<_i15.TvSeries>);

  @override
  _i10.RequestState get topRatedState => (super.noSuchMethod(
        Invocation.getter(#topRatedState),
        returnValue: _i10.RequestState.Empty,
      ) as _i10.RequestState);

  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i12.Future<void> fetchAiringToday() => (super.noSuchMethod(
        Invocation.method(
          #fetchAiringToday,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> fetchPopular() => (super.noSuchMethod(
        Invocation.method(
          #fetchPopular,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  _i12.Future<void> fetchTopRated() => (super.noSuchMethod(
        Invocation.method(
          #fetchTopRated,
          [],
        ),
        returnValue: _i12.Future<void>.value(),
        returnValueForMissingStub: _i12.Future<void>.value(),
      ) as _i12.Future<void>);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
